import express from "express";
import cors from "cors";
import * as http from "http";
import * as bodyParser from "body-parser";
type RoutesFunction = (app: express.Express) => void;

export default class Server {
    private static httpServer: http.Server;
    private routes: RoutesFunction;
    private HTTP_PORT: number = 8080;
    private corsOption: cors.CorsOptions = {
        "origin": "*",
        "methods": "GET,HEAD,PUT,PATCH,POST,DELETE",
        "preflightContinue": false,
        "optionsSuccessStatus": 204
    }

    public constructor(routes: RoutesFunction, port = 0) {
        this.routes = routes;
        if (port != 0) {
            this.HTTP_PORT = port;
        }
    }

    private async initializeServer() {
        const app: express.Express = express();
        app.use(bodyParser.urlencoded({ extended: true }));
        app.use(bodyParser.json());
        app.use(bodyParser.text());
        app.use(cors(this.corsOption));
        this.routes(app);
        Server.httpServer = http.createServer(app);
        Server.httpServer.listen(this.HTTP_PORT, () => console.log(`Server is running on port ${this.HTTP_PORT}`));
    }

    public async launchServer() {
        await this.initializeServer();
    }
    
    public async closeServer() {
        if (Server.httpServer !== undefined) {
            Server.httpServer.close();
        }
    }
}
